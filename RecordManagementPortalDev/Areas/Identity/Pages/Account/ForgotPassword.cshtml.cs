// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
#nullable disable

using System;
using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using RecordManagementPortalDev.Data;

namespace RecordManagementPortalDev.Areas.Identity.Pages.Account
{
    public class ForgotPasswordModel : PageModel
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IEmailSender _emailSender;
        private readonly IConfiguration _config;

        public ForgotPasswordModel(UserManager<ApplicationUser> userManager, IEmailSender emailSender, IConfiguration config)
        {
            _userManager = userManager;
            _emailSender = emailSender;
            _config = config;
        }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        [BindProperty]
        public InputModel Input { get; set; }

        /// <summary>
        ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
        ///     directly from your code. This API may change or be removed in future releases.
        /// </summary>
        public class InputModel
        {
            /// <summary>
            ///     This API supports the ASP.NET Core Identity default UI infrastructure and is not intended to be used
            ///     directly from your code. This API may change or be removed in future releases.
            /// </summary>
            ///  
            [Required]           
            public string UserCode { get; set; }
            [Required]
            [EmailAddress]
            public string Email { get; set; }
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {                
                var user = await _userManager.FindByNameAsync(Input.UserCode);
                //var user = await _userManager.FindByEmailAsync(Input.Email);
                if (user == null) // || !(await _userManager.IsEmailConfirmedAsync(user)))
                {
                    // Don't reveal that the user does not exist or is not confirmed
                    return RedirectToPage("./ForgotPasswordConfirmation");
                }

                // For more information on how to enable account confirmation and password reset please
                // visit https://go.microsoft.com/fwlink/?LinkID=532713
                var code = await _userManager.GeneratePasswordResetTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = Url.Page(
                    "/Account/ResetPassword",
                    pageHandler: null,
                    values: new { area = "Identity", code },
                    protocol: Request.Scheme);

                if (user.Email == Input.Email)
                {
                    string Body = "<div style='font-size: 13px'>Dear " + user.Name + ", <br>"
                    + "We’ve received a password reset request for your RMB Account :" + user.Email 
                    + "<br>"
                    + "<br>"
                    + "To reset your password, all you need to do is follow this link : <a href =" + callbackUrl 
                    +">clicking here</a>."     
                    + "<br>"
                    + "<br>"
                    + "If you did not ask to reset your password, then please ignore this email. Another user may have entered your email by mistake. No changes will be made to your account."
                    + "<br>"
                    + "<br>"
                    + "Please note:"
                    + "For security purposes, this link will expire 2 hours from the time it was sent."
                    + "<br>"
                    + "<br>"
                    + "Yours, <br>"
                    + "Mitsui-Soko Records Management <br></div>"
                    + "<p style='padding: 0; font-size:11px; color:#375a7f;'>Remark: This email is auto generated by Mitsui-Soko Records Management System. "
                    + "This message including any attachments may contain confidential or legally privileged information. " 
                    + "Any unauthorized use, retention, reproduction or disclosure is prohibited and may attract civil and criminal penalties. "
                    + "If this e-mail has been sent to you in error, please delete it and notify us immediately." 
                    + "</p>";

                    SendEmail(user.Email, "Reset Your RMB Account Password", Body);
                }
                //await _emailSender.SendEmailAsync(
                //    Input.Email,
                //    "Reset Password",
                //    $"Please reset your password by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                return RedirectToPage("./ForgotPasswordConfirmation");
            }

            return Page();
        }

        private void SendEmail(string email, string subject, string body)
        {
            string from = _config.GetValue<string>("smtp:Sender");
            string password = _config.GetValue<string>("smtp:Password");
            try
            {
                using (MailMessage mm = new MailMessage(from, email))
                {
                    mm.Subject = subject;
                    mm.Body = body;
                    mm.IsBodyHtml = true;
                    mm.Bcc.Add(_config.GetValue<string>("smtp:BCC"));
                    using (SmtpClient smtp = new SmtpClient())
                    {
                        smtp.Host = _config.GetValue<string>("smtp:Host");
                        smtp.EnableSsl = _config.GetValue<bool>("smtp:EnableSsl");
                        smtp.Port = _config.GetValue<int>("smtp:Port");
                        smtp.UseDefaultCredentials = false;
                        smtp.Credentials = new NetworkCredential(from, password);
                        smtp.Send(mm);
                    }
                }
            }
            catch (Exception ex)
            { }
        }
    }
}
